import { render, screen } from '@testing-library/react';
import { BrowserRouter } from 'react-router-dom';
import userEvent from '@testing-library/user-event';
import { renderWithRouter } from './utils/renderWithRouter';

import App from './App';
import About from './pages/About';

// O componente BrowserRouter para envolver o App.
// O mesmo procedimento precisa ser feito ao renderizar o componente no contexto de um teste:
it('Renderiza texto da p√°gina inicial', () => {
  render(
    <BrowserRouter>
      <App />
    </BrowserRouter>
  );
  expect(screen.getByText(/Voc√™ est√° na p√°gina In√≠cio/i)).toBeInTheDocument();
})

// Outra forma de envolver o App com o componente BrowserRouter √© utilizando o argumento wrapper:
it('Renderiza o texto utilizando wrapper', () => {
  render(<App />, { wrapper: BrowserRouter });
  expect(screen.getByText(/Voc√™ est√° na p√°gina In√≠cio/i)).toBeInTheDocument();
});

// Observa√ß√£o üîé: As duas formas funcionam de maneira semelhante. Voc√™ pode optar por utilizar a forma que preferir!


// Ap√≥s a renderiza√ß√£o do componente App, faz o click no link com o texto Sobre,
// com o aux√≠lio do userEvent. Ao ser clicado, ele buscar√° pelo texto Voc√™ est√° na p√°gina Sobre,
// indicando que o teste navegou para o componente About.
it('Navega para p√°gina About', async () => {
  render(<App />, { wrapper: BrowserRouter });
  expect(screen.getByText(/Voc√™ est√° na p√°gina In√≠cio/i)).toBeInTheDocument();

  const aboutLink = screen.getByRole('link', { name: /Sobre/i});
  await userEvent.click(aboutLink);
  expect(screen.getByText(/Voc√™ est√° na p√°gina Sobre/i)).toBeInTheDocument();
})

it('Renderiza o componente About', () => {
  render(<About />, { wrapper: BrowserRouter });
  expect(screen.getByText(/Voc√™ est√° na p√°gina Sobre/i)).toBeInTheDocument();
});

/* it('Navega para p√°gina Inicio', async () => {
  render(<About />, { wrapper: BrowserRouter });

  expect(screen.getByText(/Voc√™ est√° na p√°gina Sobre/i)).toBeInTheDocument();
  const homeLink = screen.getByRole('link', { name: /In√≠cio/i });
  await userEvent.click(homeLink);

  expect(screen.getByText(/Voc√™ est√° na p√°gina In√≠cio/i)).toBeInTheDocument();
}); */

// Perceba que agora n√£o √© mais necess√°rio importar o BrowserRouter nem o render, pois isso tudo √© provido pelo renderWithRouter
it('Renderiza p√°gina inicial', () => { 
  renderWithRouter(<App />);

  expect(screen.getByText(/Voc√™ est√° na p√°gina In√≠cio/i)).toBeInTheDocument();
});

// Algo semelhante acontece se utilizarmos o userEvent para simular um evento de usu√°rio:
it('Navega para a p√°gina About', async () => {
// Recuperamos o valor user retornado pela renderWithRouter para simular a intera√ß√£o de uma pessoa com a aplica√ß√£o
  const { user } = renderWithRouter(<App />);
// O valor user nada mais √© que a utiliza√ß√£o do userEvent definida na fun√ß√£o auxiliar. Perceba que, dessa forma, o c√≥digo fica muito mais leg√≠vel.
  expect(screen.getByText(/Voc√™ est√° na p√°gina In√≠cio/i)).toBeInTheDocument();

  const aboutLink = screen.getByRole('link', { name: /Sobre/i });
  await user.click(aboutLink);
  expect(screen.getByText(/Voc√™ est√° na p√°gina Sobre/i)).toBeInTheDocument();
});

//Renderizando um rota especifica no teste
it('Renderiza diretamente na rota /about', async () => {
  const { user } = renderWithRouter(<App />, { route: '/about' });

  expect(screen.getByText(/Voc√™ est√° na p√°gina Sobre/i)).toBeInTheDocument();

  const homeLink = screen.getByRole('link', { name: /In√≠cio/i });
  await user.click(homeLink);
  expect(screen.getByText(/Voc√™ est√° na p√°gina In√≠cio/i)).toBeInTheDocument();
});
// O teste acima √© aprovado, pois ele renderiza o componente App j√° na p√°gina /about.
// Agora, o teste encontra os links que s√£o renderizados pelo componente Layout,
// visto que a p√°gina inteira est√° sendo renderizada.

// Testando um rota nao definida
// Esse teste renderiza a aplica√ß√£o em uma rota que n√£o foi definida pela nossa aplica√ß√£o.
// Ao acessar essa rota, o texto P√°gina n√£o encontrada √© renderizado.
it('Testa rota not found', () => {
  renderWithRouter(<App />, { route: '/something-else' });

  expect(screen.getByText(/P√°gina n√£o encontrada/i)).toBeInTheDocument();
});
